/*
 * generated by Xtext 2.32.0
 */
package fr.n7.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PDL1GrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.PDL1.Process");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProcessElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProcessElementsProcessElementParserRuleCall_3_0 = (RuleCall)cProcessElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Process:
		//    'Process' name=ID '{'
		//        processElements+=ProcessElement*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Process' name=ID '{'
		//    processElements+=ProcessElement*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Process'
		public Keyword getProcessKeyword_0() { return cProcessKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//processElements+=ProcessElement*
		public Assignment getProcessElementsAssignment_3() { return cProcessElementsAssignment_3; }
		
		//ProcessElement
		public RuleCall getProcessElementsProcessElementParserRuleCall_3_0() { return cProcessElementsProcessElementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ProcessElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.PDL1.ProcessElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cWorkSequenceParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cWorkDefinitionParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cGuidanceParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cGestionRessourcesParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cRessourceParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final Assignment cProcessAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cProcessProcessCrossReference_1_0 = (CrossReference)cProcessAssignment_1.eContents().get(0);
		private final RuleCall cProcessProcessIDTerminalRuleCall_1_0_1 = (RuleCall)cProcessProcessCrossReference_1_0.eContents().get(1);
		
		//ProcessElement:
		//    (WorkSequence | WorkDefinition | Guidance | GestionRessources | Ressource)
		//        ( process=[Process])?;
		@Override public ParserRule getRule() { return rule; }
		
		//(WorkSequence | WorkDefinition | Guidance | GestionRessources | Ressource)
		//    ( process=[Process])?
		public Group getGroup() { return cGroup; }
		
		//(WorkSequence | WorkDefinition | Guidance | GestionRessources | Ressource)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//WorkSequence
		public RuleCall getWorkSequenceParserRuleCall_0_0() { return cWorkSequenceParserRuleCall_0_0; }
		
		//WorkDefinition
		public RuleCall getWorkDefinitionParserRuleCall_0_1() { return cWorkDefinitionParserRuleCall_0_1; }
		
		//Guidance
		public RuleCall getGuidanceParserRuleCall_0_2() { return cGuidanceParserRuleCall_0_2; }
		
		//GestionRessources
		public RuleCall getGestionRessourcesParserRuleCall_0_3() { return cGestionRessourcesParserRuleCall_0_3; }
		
		//Ressource
		public RuleCall getRessourceParserRuleCall_0_4() { return cRessourceParserRuleCall_0_4; }
		
		//( process=[Process])?
		public Assignment getProcessAssignment_1() { return cProcessAssignment_1; }
		
		//[Process]
		public CrossReference getProcessProcessCrossReference_1_0() { return cProcessProcessCrossReference_1_0; }
		
		//ID
		public RuleCall getProcessProcessIDTerminalRuleCall_1_0_1() { return cProcessProcessIDTerminalRuleCall_1_0_1; }
	}
	public class WorkDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.PDL1.WorkDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWdKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGestionressourceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cGestionressourceGestionRessourcesCrossReference_3_0 = (CrossReference)cGestionressourceAssignment_3.eContents().get(0);
		private final RuleCall cGestionressourceGestionRessourcesIDTerminalRuleCall_3_0_1 = (RuleCall)cGestionressourceGestionRessourcesCrossReference_3_0.eContents().get(1);
		private final Assignment cLinksToPredecessorsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cLinksToPredecessorsWorkSequenceCrossReference_4_0 = (CrossReference)cLinksToPredecessorsAssignment_4.eContents().get(0);
		private final RuleCall cLinksToPredecessorsWorkSequenceIDTerminalRuleCall_4_0_1 = (RuleCall)cLinksToPredecessorsWorkSequenceCrossReference_4_0.eContents().get(1);
		private final Assignment cLinksToSuccessorsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cLinksToSuccessorsWorkSequenceCrossReference_5_0 = (CrossReference)cLinksToSuccessorsAssignment_5.eContents().get(0);
		private final RuleCall cLinksToSuccessorsWorkSequenceIDTerminalRuleCall_5_0_1 = (RuleCall)cLinksToSuccessorsWorkSequenceCrossReference_5_0.eContents().get(1);
		
		//WorkDefinition:
		//    'wd' name=ID 'with' gestionressource+=[GestionRessources]*
		//        (linksToPredecessors=[WorkSequence])?
		//        (linksToSuccessors=[WorkSequence])?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'wd' name=ID 'with' gestionressource+=[GestionRessources]*
		//    (linksToPredecessors=[WorkSequence])?
		//    (linksToSuccessors=[WorkSequence])?
		public Group getGroup() { return cGroup; }
		
		//'wd'
		public Keyword getWdKeyword_0() { return cWdKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'with'
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }
		
		//gestionressource+=[GestionRessources]*
		public Assignment getGestionressourceAssignment_3() { return cGestionressourceAssignment_3; }
		
		//[GestionRessources]
		public CrossReference getGestionressourceGestionRessourcesCrossReference_3_0() { return cGestionressourceGestionRessourcesCrossReference_3_0; }
		
		//ID
		public RuleCall getGestionressourceGestionRessourcesIDTerminalRuleCall_3_0_1() { return cGestionressourceGestionRessourcesIDTerminalRuleCall_3_0_1; }
		
		//(linksToPredecessors=[WorkSequence])?
		public Assignment getLinksToPredecessorsAssignment_4() { return cLinksToPredecessorsAssignment_4; }
		
		//[WorkSequence]
		public CrossReference getLinksToPredecessorsWorkSequenceCrossReference_4_0() { return cLinksToPredecessorsWorkSequenceCrossReference_4_0; }
		
		//ID
		public RuleCall getLinksToPredecessorsWorkSequenceIDTerminalRuleCall_4_0_1() { return cLinksToPredecessorsWorkSequenceIDTerminalRuleCall_4_0_1; }
		
		//(linksToSuccessors=[WorkSequence])?
		public Assignment getLinksToSuccessorsAssignment_5() { return cLinksToSuccessorsAssignment_5; }
		
		//[WorkSequence]
		public CrossReference getLinksToSuccessorsWorkSequenceCrossReference_5_0() { return cLinksToSuccessorsWorkSequenceCrossReference_5_0; }
		
		//ID
		public RuleCall getLinksToSuccessorsWorkSequenceIDTerminalRuleCall_5_0_1() { return cLinksToSuccessorsWorkSequenceIDTerminalRuleCall_5_0_1; }
	}
	public class WorkSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.PDL1.WorkSequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLinkTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLinkTypeWorkSequenceTypeEnumRuleCall_1_0 = (RuleCall)cLinkTypeAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPredecessorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cPredecessorWorkDefinitionCrossReference_3_0 = (CrossReference)cPredecessorAssignment_3.eContents().get(0);
		private final RuleCall cPredecessorWorkDefinitionIDTerminalRuleCall_3_0_1 = (RuleCall)cPredecessorWorkDefinitionCrossReference_3_0.eContents().get(1);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSuccessorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cSuccessorWorkDefinitionCrossReference_5_0 = (CrossReference)cSuccessorAssignment_5.eContents().get(0);
		private final RuleCall cSuccessorWorkDefinitionIDTerminalRuleCall_5_0_1 = (RuleCall)cSuccessorWorkDefinitionCrossReference_5_0.eContents().get(1);
		
		//WorkSequence :
		//    'ws' linkType=WorkSequenceType
		//        'from' predecessor=[WorkDefinition]
		//        'to' successor=[WorkDefinition]
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'ws' linkType=WorkSequenceType
		//    'from' predecessor=[WorkDefinition]
		//    'to' successor=[WorkDefinition]
		public Group getGroup() { return cGroup; }
		
		//'ws'
		public Keyword getWsKeyword_0() { return cWsKeyword_0; }
		
		//linkType=WorkSequenceType
		public Assignment getLinkTypeAssignment_1() { return cLinkTypeAssignment_1; }
		
		//WorkSequenceType
		public RuleCall getLinkTypeWorkSequenceTypeEnumRuleCall_1_0() { return cLinkTypeWorkSequenceTypeEnumRuleCall_1_0; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//predecessor=[WorkDefinition]
		public Assignment getPredecessorAssignment_3() { return cPredecessorAssignment_3; }
		
		//[WorkDefinition]
		public CrossReference getPredecessorWorkDefinitionCrossReference_3_0() { return cPredecessorWorkDefinitionCrossReference_3_0; }
		
		//ID
		public RuleCall getPredecessorWorkDefinitionIDTerminalRuleCall_3_0_1() { return cPredecessorWorkDefinitionIDTerminalRuleCall_3_0_1; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//successor=[WorkDefinition]
		public Assignment getSuccessorAssignment_5() { return cSuccessorAssignment_5; }
		
		//[WorkDefinition]
		public CrossReference getSuccessorWorkDefinitionCrossReference_5_0() { return cSuccessorWorkDefinitionCrossReference_5_0; }
		
		//ID
		public RuleCall getSuccessorWorkDefinitionIDTerminalRuleCall_5_0_1() { return cSuccessorWorkDefinitionIDTerminalRuleCall_5_0_1; }
	}
	public class GestionRessourcesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.PDL1.GestionRessources");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQuantiteAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQuantiteINTTerminalRuleCall_0_0 = (RuleCall)cQuantiteAssignment_0.eContents().get(0);
		private final Assignment cRessourcesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRessourcesRessourceCrossReference_1_0 = (CrossReference)cRessourcesAssignment_1.eContents().get(0);
		private final RuleCall cRessourcesRessourceIDTerminalRuleCall_1_0_1 = (RuleCall)cRessourcesRessourceCrossReference_1_0.eContents().get(1);
		private final Assignment cUtiliseeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUtiliseeBOOLEANTerminalRuleCall_2_0 = (RuleCall)cUtiliseeAssignment_2.eContents().get(0);
		
		//GestionRessources:
		//        quantite = INT
		//        ressources += [Ressource]
		//        utilisee = BOOLEAN?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//quantite = INT
		//ressources += [Ressource]
		//utilisee = BOOLEAN?
		public Group getGroup() { return cGroup; }
		
		//quantite = INT
		public Assignment getQuantiteAssignment_0() { return cQuantiteAssignment_0; }
		
		//INT
		public RuleCall getQuantiteINTTerminalRuleCall_0_0() { return cQuantiteINTTerminalRuleCall_0_0; }
		
		//ressources += [Ressource]
		public Assignment getRessourcesAssignment_1() { return cRessourcesAssignment_1; }
		
		//[Ressource]
		public CrossReference getRessourcesRessourceCrossReference_1_0() { return cRessourcesRessourceCrossReference_1_0; }
		
		//ID
		public RuleCall getRessourcesRessourceIDTerminalRuleCall_1_0_1() { return cRessourcesRessourceIDTerminalRuleCall_1_0_1; }
		
		//utilisee = BOOLEAN?
		public Assignment getUtiliseeAssignment_2() { return cUtiliseeAssignment_2; }
		
		//BOOLEAN
		public RuleCall getUtiliseeBOOLEANTerminalRuleCall_2_0() { return cUtiliseeBOOLEANTerminalRuleCall_2_0; }
	}
	public class RessourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.PDL1.Ressource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRessourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQuantiteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQuantiteINTTerminalRuleCall_1_0 = (RuleCall)cQuantiteAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Ressource:
		//        'ressource' quantite = INT name = ID
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'ressource' quantite = INT name = ID
		public Group getGroup() { return cGroup; }
		
		//'ressource'
		public Keyword getRessourceKeyword_0() { return cRessourceKeyword_0; }
		
		//quantite = INT
		public Assignment getQuantiteAssignment_1() { return cQuantiteAssignment_1; }
		
		//INT
		public RuleCall getQuantiteINTTerminalRuleCall_1_0() { return cQuantiteINTTerminalRuleCall_1_0; }
		
		//name = ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class GuidanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.PDL1.Guidance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNoteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTexteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTexteSTRINGTerminalRuleCall_1_0 = (RuleCall)cTexteAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsProcessElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		
		//Guidance:
		//        'note' texte=STRING
		//        elements+=ProcessElement*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'note' texte=STRING
		//elements+=ProcessElement*
		public Group getGroup() { return cGroup; }
		
		//'note'
		public Keyword getNoteKeyword_0() { return cNoteKeyword_0; }
		
		//texte=STRING
		public Assignment getTexteAssignment_1() { return cTexteAssignment_1; }
		
		//STRING
		public RuleCall getTexteSTRINGTerminalRuleCall_1_0() { return cTexteSTRINGTerminalRuleCall_1_0; }
		
		//elements+=ProcessElement*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//ProcessElement
		public RuleCall getElementsProcessElementParserRuleCall_2_0() { return cElementsProcessElementParserRuleCall_2_0; }
	}
	
	public class WorkSequenceTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.PDL1.WorkSequenceType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStartToStartEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStartToStartS2sKeyword_0_0 = (Keyword)cStartToStartEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFinishToStartEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFinishToStartF2sKeyword_1_0 = (Keyword)cFinishToStartEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cStartToFinishEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cStartToFinishS2fKeyword_2_0 = (Keyword)cStartToFinishEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFinishToFinishEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFinishToFinishF2fKeyword_3_0 = (Keyword)cFinishToFinishEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum WorkSequenceType:
		//    startToStart = 's2s'  |
		//    finishToStart = 'f2s' |
		//    startToFinish  = 's2f' |
		//    finishToFinish = 'f2f';
		public EnumRule getRule() { return rule; }
		
		//startToStart = 's2s'  |
		//finishToStart = 'f2s' |
		//startToFinish  = 's2f' |
		//finishToFinish = 'f2f'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//startToStart = 's2s'
		public EnumLiteralDeclaration getStartToStartEnumLiteralDeclaration_0() { return cStartToStartEnumLiteralDeclaration_0; }
		
		//'s2s'
		public Keyword getStartToStartS2sKeyword_0_0() { return cStartToStartS2sKeyword_0_0; }
		
		//finishToStart = 'f2s'
		public EnumLiteralDeclaration getFinishToStartEnumLiteralDeclaration_1() { return cFinishToStartEnumLiteralDeclaration_1; }
		
		//'f2s'
		public Keyword getFinishToStartF2sKeyword_1_0() { return cFinishToStartF2sKeyword_1_0; }
		
		//startToFinish  = 's2f'
		public EnumLiteralDeclaration getStartToFinishEnumLiteralDeclaration_2() { return cStartToFinishEnumLiteralDeclaration_2; }
		
		//'s2f'
		public Keyword getStartToFinishS2fKeyword_2_0() { return cStartToFinishS2fKeyword_2_0; }
		
		//finishToFinish = 'f2f'
		public EnumLiteralDeclaration getFinishToFinishEnumLiteralDeclaration_3() { return cFinishToFinishEnumLiteralDeclaration_3; }
		
		//'f2f'
		public Keyword getFinishToFinishF2fKeyword_3_0() { return cFinishToFinishF2fKeyword_3_0; }
	}
	
	private final ProcessElements pProcess;
	private final TerminalRule tBOOLEAN;
	private final ProcessElementElements pProcessElement;
	private final WorkDefinitionElements pWorkDefinition;
	private final WorkSequenceElements pWorkSequence;
	private final GestionRessourcesElements pGestionRessources;
	private final RessourceElements pRessource;
	private final GuidanceElements pGuidance;
	private final WorkSequenceTypeElements eWorkSequenceType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PDL1GrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProcess = new ProcessElements();
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.PDL1.BOOLEAN");
		this.pProcessElement = new ProcessElementElements();
		this.pWorkDefinition = new WorkDefinitionElements();
		this.pWorkSequence = new WorkSequenceElements();
		this.pGestionRessources = new GestionRessourcesElements();
		this.pRessource = new RessourceElements();
		this.pGuidance = new GuidanceElements();
		this.eWorkSequenceType = new WorkSequenceTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.n7.PDL1".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Process:
	//    'Process' name=ID '{'
	//        processElements+=ProcessElement*
	//    '}';
	public ProcessElements getProcessAccess() {
		return pProcess;
	}
	
	public ParserRule getProcessRule() {
		return getProcessAccess().getRule();
	}
	
	//terminal BOOLEAN returns ecore::EBoolean:
	//    'false' | 'true';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//ProcessElement:
	//    (WorkSequence | WorkDefinition | Guidance | GestionRessources | Ressource)
	//        ( process=[Process])?;
	public ProcessElementElements getProcessElementAccess() {
		return pProcessElement;
	}
	
	public ParserRule getProcessElementRule() {
		return getProcessElementAccess().getRule();
	}
	
	//WorkDefinition:
	//    'wd' name=ID 'with' gestionressource+=[GestionRessources]*
	//        (linksToPredecessors=[WorkSequence])?
	//        (linksToSuccessors=[WorkSequence])?
	//    ;
	public WorkDefinitionElements getWorkDefinitionAccess() {
		return pWorkDefinition;
	}
	
	public ParserRule getWorkDefinitionRule() {
		return getWorkDefinitionAccess().getRule();
	}
	
	//WorkSequence :
	//    'ws' linkType=WorkSequenceType
	//        'from' predecessor=[WorkDefinition]
	//        'to' successor=[WorkDefinition]
	//    ;
	public WorkSequenceElements getWorkSequenceAccess() {
		return pWorkSequence;
	}
	
	public ParserRule getWorkSequenceRule() {
		return getWorkSequenceAccess().getRule();
	}
	
	//GestionRessources:
	//        quantite = INT
	//        ressources += [Ressource]
	//        utilisee = BOOLEAN?
	//    ;
	public GestionRessourcesElements getGestionRessourcesAccess() {
		return pGestionRessources;
	}
	
	public ParserRule getGestionRessourcesRule() {
		return getGestionRessourcesAccess().getRule();
	}
	
	//Ressource:
	//        'ressource' quantite = INT name = ID
	//    ;
	public RessourceElements getRessourceAccess() {
		return pRessource;
	}
	
	public ParserRule getRessourceRule() {
		return getRessourceAccess().getRule();
	}
	
	//Guidance:
	//        'note' texte=STRING
	//        elements+=ProcessElement*
	//    ;
	public GuidanceElements getGuidanceAccess() {
		return pGuidance;
	}
	
	public ParserRule getGuidanceRule() {
		return getGuidanceAccess().getRule();
	}
	
	//enum WorkSequenceType:
	//    startToStart = 's2s'  |
	//    finishToStart = 'f2s' |
	//    startToFinish  = 's2f' |
	//    finishToFinish = 'f2f';
	public WorkSequenceTypeElements getWorkSequenceTypeAccess() {
		return eWorkSequenceType;
	}
	
	public EnumRule getWorkSequenceTypeRule() {
		return getWorkSequenceTypeAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
