/*
 * generated by Xtext 2.32.0
 */
package fr.n7.serializer;

import com.google.inject.Inject;
import fr.n7.pDL1.GestionRessources;
import fr.n7.pDL1.Guidance;
import fr.n7.pDL1.PDL1Package;
import fr.n7.pDL1.Ressource;
import fr.n7.pDL1.WorkDefinition;
import fr.n7.pDL1.WorkSequence;
import fr.n7.services.PDL1GrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class PDL1SemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PDL1GrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PDL1Package.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PDL1Package.GESTION_RESSOURCES:
				if (rule == grammarAccess.getGestionRessourcesRule()) {
					sequence_GestionRessources(context, (GestionRessources) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getProcessElementRule()) {
					sequence_GestionRessources_ProcessElement(context, (GestionRessources) semanticObject); 
					return; 
				}
				else break;
			case PDL1Package.GUIDANCE:
				if (rule == grammarAccess.getGuidanceRule()) {
					sequence_Guidance(context, (Guidance) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getProcessElementRule()) {
					sequence_Guidance_ProcessElement(context, (Guidance) semanticObject); 
					return; 
				}
				else break;
			case PDL1Package.PROCESS:
				sequence_Process(context, (fr.n7.pDL1.Process) semanticObject); 
				return; 
			case PDL1Package.RESSOURCE:
				if (rule == grammarAccess.getProcessElementRule()) {
					sequence_ProcessElement_Ressource(context, (Ressource) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRessourceRule()) {
					sequence_Ressource(context, (Ressource) semanticObject); 
					return; 
				}
				else break;
			case PDL1Package.WORK_DEFINITION:
				if (rule == grammarAccess.getProcessElementRule()) {
					sequence_ProcessElement_WorkDefinition(context, (WorkDefinition) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getWorkDefinitionRule()) {
					sequence_WorkDefinition(context, (WorkDefinition) semanticObject); 
					return; 
				}
				else break;
			case PDL1Package.WORK_SEQUENCE:
				if (rule == grammarAccess.getProcessElementRule()) {
					sequence_ProcessElement_WorkSequence(context, (WorkSequence) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getWorkSequenceRule()) {
					sequence_WorkSequence(context, (WorkSequence) semanticObject); 
					return; 
				}
				else break;
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     GestionRessources returns GestionRessources
	 *
	 * Constraint:
	 *     (quantite=INT ressources+=[Ressource|ID] utilisee=BOOLEAN?)
	 * </pre>
	 */
	protected void sequence_GestionRessources(ISerializationContext context, GestionRessources semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ProcessElement returns GestionRessources
	 *
	 * Constraint:
	 *     (quantite=INT ressources+=[Ressource|ID] utilisee=BOOLEAN? process=[Process|ID]?)
	 * </pre>
	 */
	protected void sequence_GestionRessources_ProcessElement(ISerializationContext context, GestionRessources semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Guidance returns Guidance
	 *
	 * Constraint:
	 *     (texte=STRING elements+=ProcessElement*)
	 * </pre>
	 */
	protected void sequence_Guidance(ISerializationContext context, Guidance semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ProcessElement returns Guidance
	 *
	 * Constraint:
	 *     (texte=STRING elements+=ProcessElement* process=[Process|ID]?)
	 * </pre>
	 */
	protected void sequence_Guidance_ProcessElement(ISerializationContext context, Guidance semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ProcessElement returns Ressource
	 *
	 * Constraint:
	 *     (quantite=INT name=ID process=[Process|ID]?)
	 * </pre>
	 */
	protected void sequence_ProcessElement_Ressource(ISerializationContext context, Ressource semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ProcessElement returns WorkDefinition
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         gestionressource+=[GestionRessources|ID]* 
	 *         linksToPredecessors=[WorkSequence|ID]? 
	 *         linksToSuccessors=[WorkSequence|ID]? 
	 *         process=[Process|ID]?
	 *     )
	 * </pre>
	 */
	protected void sequence_ProcessElement_WorkDefinition(ISerializationContext context, WorkDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ProcessElement returns WorkSequence
	 *
	 * Constraint:
	 *     (linkType=WorkSequenceType predecessor=[WorkDefinition|ID] successor=[WorkDefinition|ID] process=[Process|ID]?)
	 * </pre>
	 */
	protected void sequence_ProcessElement_WorkSequence(ISerializationContext context, WorkSequence semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Process returns Process
	 *
	 * Constraint:
	 *     (name=ID processElements+=ProcessElement*)
	 * </pre>
	 */
	protected void sequence_Process(ISerializationContext context, fr.n7.pDL1.Process semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Ressource returns Ressource
	 *
	 * Constraint:
	 *     (quantite=INT name=ID)
	 * </pre>
	 */
	protected void sequence_Ressource(ISerializationContext context, Ressource semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PDL1Package.Literals.RESSOURCE__QUANTITE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PDL1Package.Literals.RESSOURCE__QUANTITE));
			if (transientValues.isValueTransient(semanticObject, PDL1Package.Literals.RESSOURCE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PDL1Package.Literals.RESSOURCE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRessourceAccess().getQuantiteINTTerminalRuleCall_1_0(), semanticObject.getQuantite());
		feeder.accept(grammarAccess.getRessourceAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     WorkDefinition returns WorkDefinition
	 *
	 * Constraint:
	 *     (name=ID gestionressource+=[GestionRessources|ID]* linksToPredecessors=[WorkSequence|ID]? linksToSuccessors=[WorkSequence|ID]?)
	 * </pre>
	 */
	protected void sequence_WorkDefinition(ISerializationContext context, WorkDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     WorkSequence returns WorkSequence
	 *
	 * Constraint:
	 *     (linkType=WorkSequenceType predecessor=[WorkDefinition|ID] successor=[WorkDefinition|ID])
	 * </pre>
	 */
	protected void sequence_WorkSequence(ISerializationContext context, WorkSequence semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PDL1Package.Literals.WORK_SEQUENCE__LINK_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PDL1Package.Literals.WORK_SEQUENCE__LINK_TYPE));
			if (transientValues.isValueTransient(semanticObject, PDL1Package.Literals.WORK_SEQUENCE__PREDECESSOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PDL1Package.Literals.WORK_SEQUENCE__PREDECESSOR));
			if (transientValues.isValueTransient(semanticObject, PDL1Package.Literals.WORK_SEQUENCE__SUCCESSOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PDL1Package.Literals.WORK_SEQUENCE__SUCCESSOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWorkSequenceAccess().getLinkTypeWorkSequenceTypeEnumRuleCall_1_0(), semanticObject.getLinkType());
		feeder.accept(grammarAccess.getWorkSequenceAccess().getPredecessorWorkDefinitionIDTerminalRuleCall_3_0_1(), semanticObject.eGet(PDL1Package.Literals.WORK_SEQUENCE__PREDECESSOR, false));
		feeder.accept(grammarAccess.getWorkSequenceAccess().getSuccessorWorkDefinitionIDTerminalRuleCall_5_0_1(), semanticObject.eGet(PDL1Package.Literals.WORK_SEQUENCE__SUCCESSOR, false));
		feeder.finish();
	}
	
	
}
